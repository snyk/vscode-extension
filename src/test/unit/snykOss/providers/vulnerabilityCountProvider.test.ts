import { deepStrictEqual, strictEqual } from 'assert';
import sinon from 'sinon';
import { InlineValueText } from 'vscode';
import { CliError } from '../../../../snyk/cli/services/cliService';
import { Language } from '../../../../snyk/common/types';
import { ILanguageClientAdapter } from '../../../../snyk/common/vscode/languageClient';
import { ITextDocumentAdapter } from '../../../../snyk/common/vscode/textdocument';
import { IUriAdapter } from '../../../../snyk/common/vscode/uri';
import { OssResultBody, OssVulnerability } from '../../../../snyk/snykOss/interfaces';
import { OssService } from '../../../../snyk/snykOss/ossService';
import { OssVulnerabilityCountProvider } from '../../../../snyk/snykOss/providers/ossVulnerabilityCountProvider';
import { ImportedModule } from '../../../../snyk/snykOss/services/vulnerabilityCount/importedModule';
import { VulnerabilityCountEmitter } from '../../../../snyk/snykOss/services/vulnerabilityCount/vulnerabilityCountEmitter';

suite('OSS VulnerabilityCountProvider', () => {
  let ossService: OssService;
  let vulnerabilityCountProvider: OssVulnerabilityCountProvider;
  let vulnerabilityCountEmitterStub: VulnerabilityCountEmitter;

  const sampleFilePath = 'C:\\git\\project\\test.js';
  const sampleModuleName = 'mongo-express';
  const sampleImportedModule = {
    fileName: sampleFilePath,
    name: sampleModuleName,
    string: 'const x = require("mongo-express")',
    line: 1,
    loc: {
      start: {
        line: 1,
        column: 16,
      },
      end: {
        line: 1,
        column: 29,
      },
    },
  } as ImportedModule;
  const sampleOssResults: OssResultBody[] = [
    {
      vulnerabilities: [
        {
          name: sampleModuleName,
          from: ['goof', sampleModuleName],
          severity: 'low',
        } as unknown as OssVulnerability,
        {
          name: sampleModuleName,
          from: ['goof', sampleModuleName],
          severity: 'medium',
        } as unknown as OssVulnerability,
      ],
      path: sampleFilePath,
      projectName: 'goof',
      displayTargetFile: 'package-lock.json',
      packageManager: 'npm',
    },
  ];

  let sampleInlineValueText = [] as InlineValueText[];
  let sampleFileName = 'package.json';
  const sameplUri = `file:///Users/some.user/Documents/some-project/${sampleFileName}`;

  let languageClientStub: { sendRequest: unknown };
  let uriStub;

  setup(() => {
    uriStub = sinon.stub().returns(sameplUri);
    languageClientStub = {
      sendRequest: sinon.stub().resolves(sampleInlineValueText),
    };

    ossService = {} as OssService;
    vulnerabilityCountProvider = new OssVulnerabilityCountProvider(
      ossService,
      {
        create: sinon.spy(),
        getLanguageClient: sinon.stub().returns(languageClientStub),
      } as ILanguageClientAdapter,
      {
        file: uriStub,
        parse: sinon.spy(),
      } as IUriAdapter,
      {
        create: sinon.stub().returns({
          uri: uriStub,
          lineCount: 1,
        }),
      } as ITextDocumentAdapter,
    );
    vulnerabilityCountEmitterStub = sinon.createStubInstance(VulnerabilityCountEmitter);
  });

  teardown(() => {
    sinon.restore();
  });

  test('Not calculated if JS/TS results are not provided', async () => {
    vulnerabilityCountProvider.getResultArray = () => undefined;

    const tsCount = await vulnerabilityCountProvider.getVulnerabilityCount(
      'test.ts',
      sampleImportedModule,
      Language.TypeScript,
      vulnerabilityCountEmitterStub,
    );
    const jsCount = await vulnerabilityCountProvider.getVulnerabilityCount(
      'test.ts',
      {
        ...sampleImportedModule,
        fileName: 'test.ts',
      },
      Language.JavaScript,
      vulnerabilityCountEmitterStub,
    );

    strictEqual(jsCount.hasCount, false);
    strictEqual(tsCount.hasCount, false);
  });

  test('Gets TS/JS imported module vulnerability results correctly', async () => {
    const text = 'issues: 2 | Critical: 1, High 1, Medium: 0, Low: 0 | Most Severe: npm:adm-zip:20180415';
    sampleInlineValueText = [
      {
        text,
        range: {
          start: {
            line: 1,
            character: 16,
          } as unknown as InlineValueText['range']['start'],
          end: {
            line: 1,
            character: 29,
          } as unknown as InlineValueText['range']['end'],
        } as unknown as InlineValueText['range'],
      },
    ];

    sampleFileName = 'test.ts';
    languageClientStub.sendRequest = sinon.stub().resolves(sampleInlineValueText);

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(
      sampleFileName,
      sampleImportedModule,
      Language.TypeScript,
      vulnerabilityCountEmitterStub,
    );

    strictEqual(count.hasCount, true, 'hasCount is not true');
    strictEqual(count.count, text, `count is not: "${text}"`);
    strictEqual(count.line, 1, 'line is not 1');
    deepStrictEqual(count.range, {
      start: {
        line: 1,
        column: 16,
      },
      end: {
        line: 1,
        column: 29,
      },
    });
  });

  test('Gets package.json dependency vulnerability results correctly', async () => {
    vulnerabilityCountProvider.getResultArray = sinon.stub().returns(sampleOssResults);

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(
      'test.ts',
      sampleImportedModule,
      Language.PJSON,
      vulnerabilityCountEmitterStub,
    );

    strictEqual(count.hasCount, true);
  });

  test("Doesn't provide a version if same direct dependency has multiple vulnerable versions", async () => {
    const ossResultsWithMultipleVersionsVulnerability = [
      {
        ...sampleOssResults[0],
        vulnerabilities: [
          {
            name: sampleModuleName,
            from: ['goof', sampleModuleName],
            version: '1.0.0',
          } as unknown as OssVulnerability,
          {
            name: sampleModuleName,
            from: ['goof', sampleModuleName],
            version: '1.0.1',
          } as unknown as OssVulnerability,
        ],
      },
    ];
    vulnerabilityCountProvider.getResultArray = sinon.stub().returns(ossResultsWithMultipleVersionsVulnerability);

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(
      'test.ts',
      sampleImportedModule,
      Language.TypeScript,
      vulnerabilityCountEmitterStub,
    );

    strictEqual(count.version, undefined);
  });

  test('File is part of OSS test', () => {
    const ossFileResult = sampleOssResults[0];
    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(sampleFilePath, ossFileResult), true);
  });

  test('File is not part of OSS test, if file path was not scanned by OSS test', () => {
    const ossFileResult = sampleOssResults[0];
    const unrelatedFilePath = '/Users/sample/project/test.ts';

    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(unrelatedFilePath, ossFileResult), false);
  });

  test('File is not part of the test if CLI test has returned an error', () => {
    const cliError = new CliError('test error');
    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(sampleFilePath, cliError), false);
  });
});
