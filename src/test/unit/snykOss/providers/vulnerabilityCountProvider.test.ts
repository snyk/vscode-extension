import { strictEqual } from 'assert';
import sinon from 'sinon';
import type { InlineValueText, Range } from 'vscode';
import { CliError } from '../../../../snyk/cli/services/cliService';
import { Language } from '../../../../snyk/common/types';
import { ILanguageClientAdapter } from '../../../../snyk/common/vscode/languageClient';
import { ITextDocumentAdapter } from '../../../../snyk/common/vscode/textdocument';
import { IUriAdapter } from '../../../../snyk/common/vscode/uri';
import { OssResultBody, OssVulnerability } from '../../../../snyk/snykOss/interfaces';
import { OssService } from '../../../../snyk/snykOss/ossService';
import { OssVulnerabilityCountProvider } from '../../../../snyk/snykOss/providers/ossVulnerabilityCountProvider';
import { ImportedModule } from '../../../../snyk/snykOss/services/vulnerabilityCount/importedModule';
import { VulnerabilityCountEmitter } from '../../../../snyk/snykOss/services/vulnerabilityCount/vulnerabilityCountEmitter';

suite('OSS VulnerabilityCountProvider', () => {
  let ossService: OssService;
  let vulnerabilityCountProvider: OssVulnerabilityCountProvider;
  let vulnerabilityCountEmitterStub: VulnerabilityCountEmitter;

  const sampleFilePath = 'C:\\git\\project\\test.js';
  const sampleModuleName = 'mongo-express';
  const sampleOssResults: OssResultBody[] = [
    {
      vulnerabilities: [
        {
          name: sampleModuleName,
          from: ['goof', sampleModuleName],
          severity: 'low',
        } as unknown as OssVulnerability,
        {
          name: sampleModuleName,
          from: ['goof', sampleModuleName],
          severity: 'medium',
        } as unknown as OssVulnerability,
      ],
      path: sampleFilePath,
      projectName: 'goof',
      displayTargetFile: 'package-lock.json',
      packageManager: 'npm',
    },
  ];

  const sampleInlineValueText = [] as InlineValueText[];
  const sampleFileName = 'package.json';
  const sameplUri = `file:///Users/some.user/Documents/some-project/${sampleFileName}`;

  let languageClientStub: { sendRequest: unknown };
  let uriStub;

  setup(() => {
    uriStub = sinon.stub().returns(sameplUri);
    languageClientStub = {
      sendRequest: sinon.stub().resolves(sampleInlineValueText),
    };

    ossService = {} as OssService;
    vulnerabilityCountProvider = new OssVulnerabilityCountProvider(
      ossService,
      {
        create: sinon.spy(),
        getLanguageClient: sinon.stub().returns(languageClientStub),
      } as ILanguageClientAdapter,
      {
        file: uriStub,
        parse: sinon.spy(),
      } as IUriAdapter,
      {
        create: sinon.stub().returns({
          uri: uriStub,
          lineCount: 1,
        }),
      } as ITextDocumentAdapter,
    );
    vulnerabilityCountEmitterStub = sinon.createStubInstance(VulnerabilityCountEmitter);
  });

  teardown(() => {
    sinon.restore();
  });

  test('Gets package.json dependency vulnerability results correctly', async () => {
    const packageJsonFilePath = 'C:\\git\\project\\package.json';
    const dependencyName = 'react';
    const dependencyVersion = '^18.0.0';
    const dependencyLineText = `    "${dependencyName}": "${dependencyVersion}",`;

    const importedModuleLine = 5; // 1-indexed
    const jsonKeyStartIndex = dependencyLineText.indexOf(`"${dependencyName}"`);
    const jsonValueEndIndex =
      dependencyLineText.lastIndexOf(`"${dependencyVersion}"`) + `"${dependencyVersion}"`.length;

    const packageJsonModule: ImportedModule = {
      fileName: packageJsonFilePath,
      name: dependencyName,
      version: dependencyVersion,
      string: dependencyLineText.trim(),
      line: importedModuleLine,
      loc: {
        start: { line: importedModuleLine, column: jsonKeyStartIndex },
        end: { line: importedModuleLine, column: jsonValueEndIndex },
      },
    };

    const expectedInlineText = 'Issues: 3 | High: 1, Medium: 1, Low: 1';
    const pjsonInlineValue: InlineValueText[] = [
      {
        text: expectedInlineText,
        range: {
          start: { line: importedModuleLine - 1, character: jsonKeyStartIndex },
          end: { line: importedModuleLine - 1, character: jsonValueEndIndex },
        } as unknown as Range,
      },
    ];
    languageClientStub.sendRequest = sinon.stub().resolves(pjsonInlineValue);

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(
      packageJsonFilePath,
      packageJsonModule,
      Language.PJSON,
      vulnerabilityCountEmitterStub,
    );

    strictEqual(count.hasCount, true);
    strictEqual(count.count, expectedInlineText);
    strictEqual(count.name, dependencyName);
    strictEqual(count.line, importedModuleLine);
  });

  test('File is part of OSS test', () => {
    const ossFileResult = sampleOssResults[0];
    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(sampleFilePath, ossFileResult), true);
  });

  test('File is not part of OSS test, if file path was not scanned by OSS test', () => {
    const ossFileResult = sampleOssResults[0];
    const unrelatedFilePath = '/Users/sample/project/test.ts';

    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(unrelatedFilePath, ossFileResult), false);
  });

  test('File is not part of the test if CLI test has returned an error', () => {
    const cliError = new CliError('test error');
    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(sampleFilePath, cliError), false);
  });
});
