import { deepStrictEqual, strictEqual } from 'assert';
import { Range } from '../../../../../../snyk/snykOss/services/vulnerabilityCount/importedModule';
import { HtmlParser } from '../../../../../../snyk/snykOss/services/vulnerabilityCount/parsers/htmlParser';

suite('HTML Parser', () => {
  let parser: HtmlParser;

  const testScenarios = [
    {
      name: 'jQuery',
      url: 'https://code.jquery.com/jquery-3.3.1.min.js',
      package: 'jquery',
      version: '3.3.1',
    },
    {
      name: 'ASPNetCDN',
      url: 'https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.2.1.min.js',
      package: 'jquery',
      version: '3.2.1',
    },
    {
      name: 'Stackpath',
      url: 'https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js',
      package: 'bootstrap',
      version: '4.4.1',
    },
    {
      name: 'MaxCDN',
      url: 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js',
      package: 'bootstrap',
      version: '3.3.7',
    },
    {
      name: 'yandex',
      url: 'https://yastatic.net/jquery/3.3.1/jquery.min.js',
      package: 'jquery',
      version: '3.3.1',
    },
    {
      name: 'unpkg.com',
      url: 'https://unpkg.com/jquery@3.3.1/dist/jquery.js',
      package: 'jquery',
      version: '3.3.1',
    },
    {
      name: 'jsDelivr â€“ npm',
      url: 'https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js',
      package: 'jquery',
      version: '3.2.1',
    },
    {
      name: 'jsDelivr - npm shorthand',
      url: 'https://cdn.jsdelivr.net/npm/jquery@3.2',
      package: 'jquery',
      version: '3.2',
    },
    {
      name: 'jsDelivr - github',
      url: 'https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js',
      package: 'jquery',
      version: '3.2.1',
    },
    {
      name: 'CDNjs',
      url: 'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js',
      package: 'jquery',
      version: '3.4.1',
    },
  ];

  setup(() => {
    parser = new HtmlParser();
  });

  testScenarios.forEach(scenario => {
    test(`Extracts ${scenario.name} package and version`, () => {
      const packages = parser.getModules('foo', `<script src="${scenario.url}"></script>`);

      strictEqual(packages[0].name, scenario.package);
      strictEqual(packages[0].version, scenario.version);
      strictEqual(packages[0].line, 1);
      deepStrictEqual(packages[0].loc, {
        start: {
          line: 1,
          column: 13,
        },
        end: {
          line: 1,
          column: 13 + scenario.url.length,
        },
      } as Range);
    });
  });
});
