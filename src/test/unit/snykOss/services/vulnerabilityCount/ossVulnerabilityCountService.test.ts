import { strictEqual } from 'assert';
import { EMPTY, Subject } from 'rxjs';
import sinon from 'sinon';
import { IConfiguration } from '../../../../../snyk/common/configuration/configuration';
import { ILanguageClientAdapter } from '../../../../../snyk/common/vscode/languageClient';
import { IVSCodeLanguages } from '../../../../../snyk/common/vscode/languages';
import { ITextDocumentAdapter } from '../../../../../snyk/common/vscode/textdocument';
import { IThemeColorAdapter } from '../../../../../snyk/common/vscode/theme';
import { TextDocument, TextEditor } from '../../../../../snyk/common/vscode/types';
import { IUriAdapter } from '../../../../../snyk/common/vscode/uri';
import { IVSCodeWindow } from '../../../../../snyk/common/vscode/window';
import { IVSCodeWorkspace } from '../../../../../snyk/common/vscode/workspace';
import { EditorDecorator } from '../../../../../snyk/snykOss/editor/editorDecorator';
import { OssFileResult } from '../../../../../snyk/snykOss/interfaces';
import { OssService } from '../../../../../snyk/snykOss/ossService';
import { OssVulnerabilityCountProvider } from '../../../../../snyk/snykOss/providers/ossVulnerabilityCountProvider';
import { OssVulnerabilityCountService } from '../../../../../snyk/snykOss/services/vulnerabilityCount/ossVulnerabilityCountService';
import { LoggerMock } from '../../../mocks/logger.mock';

suite('OSS VulnerabilityCountService', () => {
  let workspace: IVSCodeWorkspace;
  let window: IVSCodeWindow;
  let languages: IVSCodeLanguages;
  let ossVulnerabilityCountService: OssVulnerabilityCountService;
  let ossService: OssService;
  let vulnerabilityCountProvider: OssVulnerabilityCountProvider;

  setup(() => {
    const logger = new LoggerMock();
    ossService = {
      scanFinished$: EMPTY,
      newResultAvailable$: new Subject<void>(),
    } as unknown as OssService;
    workspace = {} as IVSCodeWorkspace;
    window = {
      createTextEditorDecorationType: sinon.fake(),
    } as unknown as IVSCodeWindow;
    languages = {
      createDiagnosticCollection: sinon.fake(),
      registerCodeActionsProvider: sinon.fake(),
      registerHoverProvider: sinon.fake(),
    } as unknown as IVSCodeLanguages;
    vulnerabilityCountProvider = new OssVulnerabilityCountProvider(
      ossService,
      {} as ILanguageClientAdapter,
      {} as IUriAdapter,
      {} as ITextDocumentAdapter,
    );

    const editorDecorator = new EditorDecorator(window, languages, {} as IThemeColorAdapter);
    const configuration = {} as IConfiguration;

    ossVulnerabilityCountService = new OssVulnerabilityCountService(
      workspace,
      window,
      languages,
      vulnerabilityCountProvider,
      ossService,
      logger,
      editorDecorator,
      configuration,
    );
  });

  teardown(() => {
    sinon.restore();
  });

  test('Attaches onDidChangeTextDocument listener on activation', () => {
    window.onDidChangeActiveTextEditor = sinon.fake();
    window.getActiveTextEditor = sinon.fake();

    const onDidChangeTextDocumentSpy = sinon.fake();
    workspace.onDidChangeTextDocument = onDidChangeTextDocumentSpy;

    ossVulnerabilityCountService.activate();

    strictEqual(onDidChangeTextDocumentSpy.calledOnce, true);
  });

  test('Attaches onDidChangeActiveTextEditor listener on activation', () => {
    workspace.onDidChangeTextDocument = sinon.fake();
    window.getActiveTextEditor = sinon.fake();

    const onDidChangeActiveTextEditor = sinon.fake();
    window.onDidChangeActiveTextEditor = onDidChangeActiveTextEditor;

    ossVulnerabilityCountService.activate();

    strictEqual(onDidChangeActiveTextEditor.calledOnce, true);
  });

  test('Processes file on receiving new scan result', () => {
    window.getActiveTextEditor = () =>
      ({
        document: undefined,
      } as unknown as TextEditor);
    workspace.onDidChangeTextDocument = sinon.fake();
    window.onDidChangeActiveTextEditor = sinon.fake();

    const getActiveTextEditorSpy = sinon.spy(window, 'getActiveTextEditor');
    const processFileSpy = sinon.spy(ossVulnerabilityCountService, 'processFile');

    ossVulnerabilityCountService.activate();
    ossService.newResultAvailable$.next();

    strictEqual(getActiveTextEditorSpy.called, true, 'getActiveTextEditor should be called');
    strictEqual(processFileSpy.calledOnce, true, 'processFile should be called');
  });

  test("Doesn't process if file is language not supported", () => {
    const document = {
      fileName: 'C:\\git\\project\\test.java',
      languageId: 'java',
    } as TextDocument;

    const processed = ossVulnerabilityCountService.processFile(document);
    strictEqual(processed, false);
  });

  test("Doesn't process if file is supported and OSS scan hasn't run", () => {
    vulnerabilityCountProvider.getResultArray = () => undefined;
    const tsDocument = {
      fileName: 'C:\\git\\project\\test.ts',
      languageId: 'typescript',
    } as TextDocument;
    const jsDocument = {
      fileName: 'C:\\git\\project\\test.js',
      languageId: 'javascript',
    } as TextDocument;
    const pjsonDocument = {
      fileName: 'C:\\git\\project\\package.json',
      languageId: 'json',
    } as TextDocument;

    strictEqual(ossVulnerabilityCountService.processFile(tsDocument), false);
    strictEqual(ossVulnerabilityCountService.processFile(jsDocument), false);
    strictEqual(ossVulnerabilityCountService.processFile(pjsonDocument), false);
  });

  test('Successful file processing', () => {
    const document = {
      fileName: 'C:\\git\\project\\test.ts',
      languageId: 'typescript',
      getText: () => 'const x = require("react")',
    } as TextDocument;
    vulnerabilityCountProvider.getResultArray = () => [{} as OssFileResult];
    sinon.stub(vulnerabilityCountProvider, 'isFilePartOfOssTest').returns(true);

    const processed = ossVulnerabilityCountService.processFile(document);

    strictEqual(processed, true);
  });
});
