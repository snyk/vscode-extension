import { deepStrictEqual, strictEqual } from 'assert';
import sinon from 'sinon';
import { CliError } from '../../../../../snyk/cli/services/cliService';
import { Language } from '../../../../../snyk/common/types';
import { OssResultBody, OssVulnerability } from '../../../../../snyk/snykOss/ossResult';
import { OssService } from '../../../../../snyk/snykOss/services/ossService';
import { ImportedModule } from '../../../../../snyk/snykOss/services/vulnerabilityCount/importedModule';
import { NpmModuleInfoFetchService } from '../../../../../snyk/snykOss/services/vulnerabilityCount/npmModuleInfoFetchService';
import { ModuleVulnerabilityCountProvider } from '../../../../../snyk/snykOss/services/vulnerabilityCount/vulnerabilityCountProvider';

suite('OSS ModuleVulnerabilityCountProvider', () => {
  let ossService: OssService;
  let vulnerabilityCountProvider: ModuleVulnerabilityCountProvider;

  const sampleFilePath = 'C:\\git\\project\\test.js';
  const sampleModuleName = 'mongo-express';
  const sampleImportedModule = {
    fileName: sampleFilePath,
    name: sampleModuleName,
    string: 'const x = require("mongo-express")',
    line: 1,
    loc: {
      start: {
        line: 1,
        column: 16,
      },
      end: {
        line: 1,
        column: 29,
      },
    },
  } as ImportedModule;
  const sampleOssResults: OssResultBody[] = [
    {
      vulnerabilities: [
        {
          name: sampleModuleName,
          from: ['goof', sampleModuleName],
          severity: 'low',
        } as unknown as OssVulnerability,
        {
          name: sampleModuleName,
          from: ['goof', sampleModuleName],
          severity: 'medium',
        } as unknown as OssVulnerability,
      ],
      path: sampleFilePath,
      projectName: 'goof',
      displayTargetFile: 'package-lock.json',
      packageManager: 'npm',
    },
  ];

  setup(() => {
    const npmModuleInfoFetchService = {} as NpmModuleInfoFetchService;
    ossService = {} as OssService;
    vulnerabilityCountProvider = new ModuleVulnerabilityCountProvider(ossService, npmModuleInfoFetchService);
  });

  teardown(() => {
    sinon.restore();
  });

  test('Not calculated if JS/TS results are not provided', async () => {
    ossService.getResultArray = () => undefined;

    const tsCount = await vulnerabilityCountProvider.getVulnerabilityCount(sampleImportedModule, Language.TypeScript);
    const jsCount = await vulnerabilityCountProvider.getVulnerabilityCount(
      {
        ...sampleImportedModule,
        fileName: 'test.ts',
      },
      Language.JavaScript,
    );

    strictEqual(jsCount.hasCount, false);
    strictEqual(tsCount.hasCount, false);
  });

  test('Gets TS/JS imported module vulnerability results correctly', async () => {
    ossService.getResultArray = () => sampleOssResults;
    ossService.getUniqueVulnerabilities = () => sampleOssResults[0].vulnerabilities;

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(sampleImportedModule, Language.TypeScript);

    strictEqual(count.hasCount, true);
    strictEqual(count.count, 2);
    strictEqual(count.line, 1);
    deepStrictEqual(count.range, {
      start: {
        line: 1,
        column: 16,
      },
      end: {
        line: 1,
        column: 29,
      },
    });
    strictEqual(count.severityCounts?.low, 1);
    strictEqual(count.severityCounts?.medium, 1);
  });

  test('Gets package.json dependency vulnerability results correctly', async () => {
    ossService.getResultArray = () => sampleOssResults;
    ossService.getUniqueVulnerabilities = () => sampleOssResults[0].vulnerabilities;

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(sampleImportedModule, Language.PJSON);

    strictEqual(count.hasCount, true);
  });

  test('Gets only direct dependency vulnerability count', async () => {
    const indirectDependency = '@indirect/dependency';
    const ossResultsWithIndirectVulnerability = [
      {
        ...sampleOssResults[0],
        vulnerabilities: [
          {
            name: sampleModuleName,
            from: ['goof', sampleModuleName],
          } as unknown as OssVulnerability,
          {
            name: sampleModuleName,
            from: ['goof', indirectDependency, sampleModuleName],
          } as unknown as OssVulnerability,
        ],
      },
    ];
    ossService.getResultArray = () => ossResultsWithIndirectVulnerability;
    ossService.getUniqueVulnerabilities = () => ossResultsWithIndirectVulnerability[0].vulnerabilities;

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(sampleImportedModule, Language.TypeScript);

    strictEqual(count.hasCount, true);
    strictEqual(count.count, 1);
  });

  test('Provides a version if same direct dependency has single vulnerable version', async () => {
    const version = '1.0.0';
    const ossResultsWithMultipleVersionsVulnerability = [
      {
        ...sampleOssResults[0],
        vulnerabilities: [
          {
            name: sampleModuleName,
            from: ['goof', sampleModuleName],
            version: version,
          } as unknown as OssVulnerability,
          {
            name: sampleModuleName,
            from: ['goof', sampleModuleName],
            version: version,
          } as unknown as OssVulnerability,
        ],
      },
    ];
    ossService.getResultArray = () => ossResultsWithMultipleVersionsVulnerability;
    ossService.getUniqueVulnerabilities = () => ossResultsWithMultipleVersionsVulnerability[0].vulnerabilities;

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(sampleImportedModule, Language.TypeScript);

    strictEqual(count.version, version);
  });

  test("Doesn't provide a version if same direct dependency has multiple vulnerable versions", async () => {
    const ossResultsWithMultipleVersionsVulnerability = [
      {
        ...sampleOssResults[0],
        vulnerabilities: [
          {
            name: sampleModuleName,
            from: ['goof', sampleModuleName],
            version: '1.0.0',
          } as unknown as OssVulnerability,
          {
            name: sampleModuleName,
            from: ['goof', sampleModuleName],
            version: '1.0.1',
          } as unknown as OssVulnerability,
        ],
      },
    ];
    ossService.getResultArray = () => ossResultsWithMultipleVersionsVulnerability;
    ossService.getUniqueVulnerabilities = () => ossResultsWithMultipleVersionsVulnerability[0].vulnerabilities;

    const count = await vulnerabilityCountProvider.getVulnerabilityCount(sampleImportedModule, Language.TypeScript);

    strictEqual(count.version, undefined);
  });

  test('File is part of OSS test', () => {
    const ossFileResult = sampleOssResults[0];
    const relatedFilePath = sampleFilePath;

    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(relatedFilePath, ossFileResult), true);
  });

  test('File is not part of OSS test, if file path was not scanned by OSS test', () => {
    const ossFileResult = sampleOssResults[0];
    const unrelatedFilePath = '/Users/sample/project/test.ts';

    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(unrelatedFilePath, ossFileResult), false);
  });

  test('File is not part of the test if CLI test has returned an error', () => {
    const cliError = new CliError('test error');
    strictEqual(vulnerabilityCountProvider.isFilePartOfOssTest(sampleFilePath, cliError), false);
  });
});
