import { IAnalytics } from '../../common/analytics/itly';
import { OpenCommandIssueType, OpenIssueCommandArg } from '../../common/commands/types';
import { SNYK_OPEN_ISSUE_COMMAND } from '../../common/constants/commands';
import { IDE_NAME } from '../../common/constants/general';
import { ICodeActionKindAdapter } from '../../common/vscode/codeAction';
import {
  CodeAction,
  CodeActionContext,
  CodeActionKind,
  CodeActionProvider,
  Command,
  ProviderResult,
  Range,
  Selection,
  TextDocument,
} from '../../common/vscode/types';
import { DIAGNOSTICS_OSS_COLLECTION_NAME } from '../../snykCode/constants/analysis';
import { messages } from '../messages/vulnerabilityCount';
import { isResultCliError } from '../ossResult';
import { OssService } from '../services/ossService';
import { ModuleVulnerabilityCountProvider } from '../services/vulnerabilityCount/vulnerabilityCountProvider';

export class VulnerabilityCodeActionProvider implements CodeActionProvider {
  public codeActionKinds: ReadonlyArray<CodeActionKind> = [this.codeActionKindProvider.getQuickFix()];

  constructor(
    private readonly ossService: OssService,
    private readonly vulnerabilityCountProvider: ModuleVulnerabilityCountProvider,
    private readonly codeActionKindProvider: ICodeActionKindAdapter,
    private readonly analytics: IAnalytics,
  ) {}

  async provideCodeActions(
    document: TextDocument,
    _: Range | Selection,
    context: CodeActionContext,
  ): Promise<ProviderResult<(CodeAction | Command)[]>> {
    const ossDiagnostics = context.diagnostics.filter(d => d.source === DIAGNOSTICS_OSS_COLLECTION_NAME);
    if (!ossDiagnostics.length) {
      return;
    }

    const ossResult = this.ossService.getResultArray();
    if (!ossResult) {
      return;
    }

    const fileResult = ossResult.find(
      res => !isResultCliError(res) && this.vulnerabilityCountProvider.isFilePartOfOssTest(document.fileName, res),
    );

    if (!fileResult || isResultCliError(fileResult)) {
      return;
    }

    for (const diagnostic of ossDiagnostics) {
      const vulnerability = fileResult.vulnerabilities.find(vuln => vuln.id === diagnostic.code);
      if (!vulnerability) {
        continue;
      }

      const command: Command = {
        command: SNYK_OPEN_ISSUE_COMMAND,
        title: messages.showMostSevereVulnerability,
        arguments: [
          {
            issueType: OpenCommandIssueType.OssVulnerability,
            issue: await this.ossService.getOssIssueCommandArg(vulnerability, fileResult.vulnerabilities),
          } as OpenIssueCommandArg,
        ],
      };

      this.analytics.logQuickFixIsDisplayed({
        quickFixType: ['Show Most Severe Vulnerability'],
        ide: IDE_NAME,
      });

      return [command];
    }
  }
}
