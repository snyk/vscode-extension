import { IAnalytics } from '../../common/analytics/itly';
import { IDE_NAME } from '../../common/constants/general';
import { SupportedLanguageIds } from '../../common/constants/languageConsts';
import { IVSCodeLanguages } from '../../common/vscode/languages';
import { DiagnosticCollection, Disposable, Hover, Position, TextDocument } from '../../common/vscode/types';
import { IssueUtils } from '../../snykCode/utils/issueUtils';

export class VulnerabilityCountHoverProvider implements Disposable {
  private hoverProvider: Disposable | undefined;

  constructor(private readonly vscodeLanguages: IVSCodeLanguages, private readonly analytics: IAnalytics) {}

  register(diagnostics: DiagnosticCollection | undefined): Disposable {
    const documentFilter = SupportedLanguageIds.map(id => ({ scheme: 'file', language: id }));

    this.hoverProvider = this.vscodeLanguages.registerHoverProvider(documentFilter, {
      provideHover: this.getHover(diagnostics),
    });

    return this;
  }

  getHover(diagnostics: DiagnosticCollection | undefined) {
    return (document: TextDocument, position: Position): Hover | undefined => {
      if (!diagnostics || !diagnostics.has(document.uri)) {
        return undefined;
      }

      const currentFileReviewIssues = diagnostics.get(document.uri);
      const issue = IssueUtils.findIssueWithRange(position, currentFileReviewIssues);
      if (issue) {
        this.logIssueHoverIsDisplayed();
      }
    };
  }

  private logIssueHoverIsDisplayed(): void {
    this.analytics.logIssueHoverIsDisplayed({
      issueType: 'Open Source Vulnerability',
      ide: IDE_NAME,
    });
  }

  dispose(): void {
    if (this.hoverProvider) {
      this.hoverProvider.dispose();
    }
  }
}
