import _ from 'lodash';
import { Command } from 'vscode';
import { OpenCommandIssueType, OpenIssueCommandArg } from '../../common/commands/types';
import { IConfiguration } from '../../common/configuration/configuration';
import { configuration } from '../../common/configuration/instance';
import { SNYK_OPEN_ISSUE_COMMAND } from '../../common/constants/commands';
import { SNYK_ANALYSIS_STATUS } from '../../common/constants/views';
import { Issue, OssIssueData } from '../../common/languageServer/types';
import { IContextService } from '../../common/services/contextService';
import { IProductService } from '../../common/services/productService';
import { IViewManagerService } from '../../common/services/viewManagerService';
import { ProductIssueTreeProvider } from '../../common/views/issueTreeProvider';
import { TreeNode } from '../../common/views/treeNode';
import { IVSCodeLanguages } from '../../common/vscode/languages';
import { messages } from '../constants/messages';
import { getOssIssueCommandArg } from './ossIssueCommandHelper';
import { IFolderConfigs } from '../../common/configuration/folderConfigs';
import { ILog } from '../../common/logger/interfaces';

export default class OssIssueTreeProvider extends ProductIssueTreeProvider<OssIssueData> {
  constructor(
    protected readonly logger: ILog,
    protected viewManagerService: IViewManagerService,
    protected contextService: IContextService,
    protected ossService: IProductService<OssIssueData>,
    protected configuration: IConfiguration,
    protected languages: IVSCodeLanguages,
    protected readonly folderConfigs: IFolderConfigs,
  ) {
    super(logger, contextService, ossService, configuration, languages, folderConfigs);
  }

  getRootChildren(): TreeNode[] {
    if (!configuration.getFeaturesConfiguration()?.ossEnabled) {
      return [
        new TreeNode({
          text: SNYK_ANALYSIS_STATUS.OSS_DISABLED,
        }),
      ];
    }

    return super.getRootChildren();
  }

  onDidChangeTreeData = this.viewManagerService.refreshOssViewEmitter.event;

  shouldShowTree(): boolean {
    return this.contextService.shouldShowOssAnalysis;
  }

  getIssueDescriptionText(dir: string | undefined, issueCount: number): string | undefined {
    return `${dir} - ${issueCount} ${issueCount === 1 ? 'vulnerability' : 'vulnerabilities'}`;
  }

  filterIssues(issues: Issue<OssIssueData>[]): Issue<OssIssueData>[] {
    return issues.filter((issue, index, self) => {
      return index === self.findIndex(t => t.id === issue.id);
    });
  }

  getRunTestMessage = () => messages.treeView.runTest;

  getIssueTitle = (issue: Issue<OssIssueData>) =>
    `${issue.additionalData.packageName}@${issue.additionalData.version} - ${issue.title}`;

  getIssueRange = () => undefined;

  override getOpenIssueCommand(
    issue: Issue<OssIssueData>,
    folderPath: string,
    _filePath: string,
    filteredIssues: Issue<OssIssueData>[],
  ): Command {
    return {
      command: SNYK_OPEN_ISSUE_COMMAND,
      title: '',
      arguments: [
        {
          issueType: OpenCommandIssueType.OssVulnerability,
          issue: getOssIssueCommandArg(issue, folderPath, filteredIssues),
        } as OpenIssueCommandArg,
      ],
    };
  }
}
