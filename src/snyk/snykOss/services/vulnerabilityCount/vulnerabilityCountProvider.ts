import { isResultCliError, OssFileResult, OssResultBody } from '../../ossResult';
import { OssService } from '../ossService';
import { ImportedModule, ModuleVulnerabilityCount, TestedImportedModule } from './importedModule';
import { NpmModuleInfoFetchService } from './npmModuleInfoFetchService';
import { SupportedLanguage } from './ossVulnerabilityCountService';

export class ModuleVulnerabilityCountProvider {
  constructor(
    private readonly ossService: OssService,
    private readonly npmModuleInfoFetchService: NpmModuleInfoFetchService,
  ) {}

  async getVulnerabilityCount(module: ImportedModule, language: SupportedLanguage): Promise<ModuleVulnerabilityCount> {
    const notCalculated = {
      name: module.name,
      hasCount: false,
    };

    if ([SupportedLanguage.TypeScript, SupportedLanguage.JavaScript].includes(language)) {
      const ossResult = this.ossService.getResultArray();
      if (!ossResult) {
        return notCalculated;
      }

      return this.mapOssResult(module, ossResult);
    } else if (language == SupportedLanguage.HTML) {
      const testedModuleInfo = await this.npmModuleInfoFetchService.getModuleVulnerabilityInfo(module);
      return this.mapTestedImportedModule(testedModuleInfo);
    }

    return notCalculated;
  }

  isFilePartOfOssTest(filePath: string, ossFileResult: OssFileResult): boolean {
    if (isResultCliError(ossFileResult)) {
      return false;
    }

    // File is considered to be part of OSS test if it has common root directory between OSS result path and filename path.
    // This is since package.json always lies in the root directory folder of a project.
    if (filePath.startsWith(ossFileResult.path)) {
      return true;
    }

    return false;
  }

  private mapTestedImportedModule(module: TestedImportedModule): ModuleVulnerabilityCount {
    return {
      name: module.name,
      version: module.version,
      count: module.vulnerabilityCount,
      hasCount: module.tested,
    };
  }

  private mapOssResult(module: ImportedModule, ossResult: OssFileResult[]): ModuleVulnerabilityCount {
    const notCalculated = {
      name: module.name,
      hasCount: false,
    };

    for (const fileResult of ossResult) {
      if (!this.isFilePartOfOssTest(module.fileName, fileResult)) {
        continue;
      }

      const vulnerabilities = this.ossService.getUniqueVulnerabilities((fileResult as OssResultBody).vulnerabilities);

      // Sum up all vulnerabilities detected in first-level dependencies by OSS matching the imported module name.
      // Todo: reason
      const vulnerabilityCount = vulnerabilities
        .filter(v => v.name === module.name)
        .filter(v => v.from.length == 2 && v.from[1].startsWith(module.name))
        .length;

      return {
        name: module.name,
        count: vulnerabilityCount,
        hasCount: true,
      };
    }

    return notCalculated;
  }
}
