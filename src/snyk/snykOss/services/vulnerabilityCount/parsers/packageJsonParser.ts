import { ImportedModule, Range } from '../importedModule';
import { ModuleParser } from './moduleParser';

export type PackageJsonDependencies = {
  [dependency: string]: string;
};

export interface PackageJson {
  dependencies: PackageJsonDependencies;
}

export interface DependencyLines {
  lines: string[];
  offset: number;
}

export class PackageJsonParser extends ModuleParser {
  getModules(fileName: string, source: string): ImportedModule[] {
    const packages = [];

    const lines: string[] = [];
    source.split(/\r?\n/).forEach(function (line) {
      lines.push(line);
    });

    const pjson = JSON.parse(source) as PackageJson;
    const depLines = this.findDependecyLines(pjson.dependencies, lines);
    if (!depLines) {
      return [];
    }

    for (const dependency in pjson.dependencies) {
      const loc = this.findRange(dependency, depLines.lines, depLines.offset);

      const module = {
        fileName,
        name: dependency,
        loc,
        line: loc?.start.line,
      } as ImportedModule;

      packages.push(module);
    }

    return packages;
  }

  private findDependecyLines(dependencies: PackageJsonDependencies, lines: string[]): DependencyLines | undefined {
    const depStartLine = lines.find(x => x.includes('"dependencies"'));
    if (!depStartLine) {
      return;
    }

    const depLineIndex = lines.indexOf(depStartLine) + 1;
    const depLines = lines.slice(depLineIndex, depLineIndex + Object.keys(dependencies).length);

    return {
      lines: depLines,
      offset: depLineIndex,
    };
  }

  private findRange(dependency: string, lines: string[], offset: number): Range | undefined {
    const line = lines.find(x => x.includes('"' + dependency + '"'));
    if (!line) {
      return;
    }

    const index = offset + lines.indexOf(line) + 1;

    return {
      start: {
        line: index,
        column: line.indexOf('"'),
      },
      end: {
        line: index,
        column: line.length - 1,
      },
    };
  }
}
