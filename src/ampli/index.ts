/**
 * This file is auto-generated by Amplitude.
 * To update run 'ampli pull visual-studio-code'
 *
 * Works with versions ^2.0.8 of @itly/sdk and @itly/plugin's
 * https://www.npmjs.com/search?q=%40itly
 */

/* tslint:disable */
/* eslint-disable */
import {
  ItlyNode,
  Options as OptionsBase,
  Event as EventBase,
  Plugin,
  Environment as EnvironmentBase,
  Properties as PropertiesBase,
  ValidationResponse as ValidationResponseBase,
  CallOptions as CallOptionsBase,
  PluginCallOptions as PluginCallOptionsBase,
} from '@itly/sdk';
import SchemaValidatorPlugin from '@itly/plugin-schema-validator';

export type Options = OptionsBase;
export type Environment = EnvironmentBase;
export type Event = EventBase;
export type Properties = PropertiesBase;
export type ValidationResponse = ValidationResponseBase;
export type CallOptions = CallOptionsBase;
export type PluginCallOptions = PluginCallOptionsBase;
export { Plugin, Validation, Loggers } from '@itly/sdk';

export interface AliasOptions extends CallOptions {
}

export interface IdentifyOptions extends CallOptions {
}

export interface GroupOptions extends CallOptions {
}

export interface PageOptions extends CallOptions {
}

export interface TrackOptions extends CallOptions {
}

export interface IdentifyProperties {
  /**
   * when a User record is an actual user or when it’s a “service account”
   */
  accountType?: "user" | "service" | "app-instance" | "automated-test-user";
  /**
   * Link to access more information about the user
   */
  adminLink?: string;
  /**
   * Auth provider (login method)
   */
  authProvider?: string;
  createdAt?: number;
  /**
   * Email address for the user
   */
  email?: string;
  /**
   * Whether or not the user has their first integration set up
   */
  hasFirstIntegration?: boolean;
  /**
   * Whether or not the user has their first project imported
   */
  hasFirstProject?: boolean;
  /**
   * Indicates whether user has a personal or business email address
   */
  hasPersonalEmail?: boolean;
  /**
   * Is a user opted in to the new App UI navigation while still in beta (Oct 2022)?
   */
  isAppUIBetaEnabled?: boolean;
  /**
   * Applies to non-user identities, such as Snyk Orgs
   */
  isNonUser?: boolean;
  /**
   * Whether or not the user belongs to the Snyk org (determined by the email address ending with @snyk.io)
   */
  isSnyk?: boolean;
  /**
   * Whether or not the user should be considered a Snyk administrator
   */
  isSnykAdmin?: boolean;
  /**
   * An array of the ecosystems(eg: javascript, java, docker, kubernetes) that the user selects as their favorites on the snyk learn app.
   */
  learnPreferredEcosystems?: string[];
  /**
   * Used by Marketo to determine whether to send product updates emails to users. We are setting this value during product updates consent flow after registration.
   */
  productUpdatesConsent?: boolean;
  /**
   * A trait for users who got redirected to `/product-updates` consent page.
   *
   *
   * Will allow us to differentiate these users in Marketo and ensure they don't receive product updates emails without explicitly opting in.
   */
  productUpdatesConsentIsDisplayed?: boolean;
  /**
   * Public ID of user
   */
  user_id?: string;
  /**
   * Username of the user
   */
  username?: string;
  /**
   * Query utmcampaign. All UTM properties must be in snake\_case.
   */
  utm_campaign?: string;
  /**
   * Query utm\_content. All UTM properties must be in snake\_case.
   */
  utm_content?: string;
  /**
   * Query utm\_medium. All UTM properties must be in snake\_case.
   */
  utm_medium?: string;
  /**
   * Query utm\_source. All UTM properties must be in snake\_case.
   */
  utm_source?: string;
  /**
   * Query utm\_term. All UTM properties must be in snake\_case.
   */
  utm_term?: string;
}

export interface GroupProperties {
  "[Amplitude] Group ID"?: {
    [k: string]: unknown;
  };
  "[Amplitude] Group name"?: {
    [k: string]: unknown;
  };
  $set?: {
    [k: string]: unknown;
  };
  $unset?: {
    [k: string]: unknown;
  };
  "Account ARR"?: {
    [k: string]: unknown;
  };
  "Account Plan"?: {
    [k: string]: unknown;
  };
  "Billing Frequency"?: {
    [k: string]: unknown;
  };
  "Code Licenses"?: {
    [k: string]: unknown;
  };
  "Container Licenses"?: {
    [k: string]: unknown;
  };
  countFixesFirst30Days?: {
    [k: string]: unknown;
  };
  countFixesFirst7Days?: {
    [k: string]: unknown;
  };
  countFixesPast30Days?: {
    [k: string]: unknown;
  };
  countFixesPast7Days?: {
    [k: string]: unknown;
  };
  countFixesTotal?: {
    [k: string]: unknown;
  };
  currentEngagementState?: {
    [k: string]: unknown;
  };
  dateLastEngagementStateChange?: {
    [k: string]: unknown;
  };
  daysSinceLastEngagementStateChange?: {
    [k: string]: unknown;
  };
  "DB Feed Licenses"?: {
    [k: string]: unknown;
  };
  "Free Trial End Date"?: {
    [k: string]: unknown;
  };
  "Free Trial Start Date"?: {
    [k: string]: unknown;
  };
  /**
   * ID that is used in conjunction with a groupType to specify an Org or a Group association: {groupId: 1234, groupType: "org"}
   */
  groupId?: string;
  /**
   * The name of the group associated with the org
   */
  groupName?: string;
  /**
   * Key that is used to specify the name of the Segment Group that a groupId is being set for.
   */
  groupType?: "org" | "group" | "account";
  hasFixFirst30Days?: {
    [k: string]: unknown;
  };
  hasFixFirst7Days?: {
    [k: string]: unknown;
  };
  hasFixPast30Days?: {
    [k: string]: unknown;
  };
  hasFixPast7Days?: {
    [k: string]: unknown;
  };
  "IAC Licenses"?: {
    [k: string]: unknown;
  };
  id?: {
    [k: string]: unknown;
  };
  internalName?: {
    [k: string]: unknown;
  };
  isPassthrough?: {
    [k: string]: unknown;
  };
  name?: {
    [k: string]: unknown;
  };
  "Open Source Licenses"?: {
    [k: string]: unknown;
  };
  /**
   * The plan of the org
   */
  plan?: string;
  priorEngagementState?: {
    [k: string]: unknown;
  };
  /**
   * The types of projects in the org
   */
  projectTypes?: string[];
}

export interface PageProperties {
  /**
   * Name of the ecosystem (npm|python|docker...)
   */
  ecosystem?: string;
  /**
   * The name of the package
   */
  package?: string;
  /**
   * cocoapods , composer , golang , hex , maven , npm , nuget , pip , rubygems
   */
  packageManager?: string;
  /**
   * Package version, for example 18.0.1
   */
  packageVersion?: string;
  /**
   * The canonical path of the page
   */
  path?: string;
  /**
   * The page that linked to this page.
   */
  referrer?: string;
  /**
   * Query parameters in url.
   */
  search?: string;
  /**
   * The page title.
   */
  title?: string;
  /**
   * The url of the page.
   */
  url?: string;
  /**
   * Used for page views on individual vulnerability pages
   */
  vulnerabilityId?: string;
}

export interface AnalysisIsReadyProperties {
  /**
   * Analysis types selected by the user for the scan:
   *
   * * open source vulnerabilities
   *
   * * code quality issues
   *
   * * code security vulnerabilities
   *
   * * advisor issues
   *
   * * infrastructure as code issues
   *
   * * container vulnerabilities
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Snyk Advisor, Snyk Code Quality, Snyk Code Security, Snyk Open Source, Snyk Container, Snyk Infrastructure as Code |
   */
  analysisType:
    | "Snyk Advisor"
    | "Snyk Code Quality"
    | "Snyk Code Security"
    | "Snyk Open Source"
    | "Snyk Container"
    | "Snyk Infrastructure as Code";
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  durationInSeconds?: number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  fileCount?: number;
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Success, Error |
   */
  result: "Success" | "Error";
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
}

export interface AnalysisIsTriggeredProperties {
  /**
   * Analysis types selected by the user for the scan: open source vulnerabilities, code quality issues and/or code security vulnerabilities.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 1 |
   * | Unique Items | true |
   * | Item Type | string |
   *
   * @minItems 1
   */
  analysisType: [string, ...string[]];
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
  /**
   * * True means that the analysis was triggered by the User.
   *
   * * False means that the analysis was triggered automatically by the plugin.
   */
  triggeredByUser: boolean;
}

export interface AuthenticateButtonIsClickedProperties {
  /**
   * Used to identify the source for multi-source events.
   *
   * For example, if a given event is shared between Snyk Advisor and Snyk Learn, this property helps to differentiate between the two.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Advisor, App, Learn, IDE, Website, CodeSnippets |
   */
  eventSource?: "Advisor" | "App" | "Learn" | "IDE" | "Website" | "CodeSnippets";
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
}

export interface FalsePositiveIsDisplayedProperties {
  /**
   * Used to identify the source for multi-source events.
   *
   * For example, if a given event is shared between Snyk Advisor and Snyk Learn, this property helps to differentiate between the two.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Advisor, App, Learn, IDE, Website, CodeSnippets |
   */
  eventSource?: "Advisor" | "App" | "Learn" | "IDE" | "Website" | "CodeSnippets";
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
}

export interface FalsePositiveIsSubmittedProperties {
  /**
   * Used to identify the source for multi-source events.
   *
   * For example, if a given event is shared between Snyk Advisor and Snyk Learn, this property helps to differentiate between the two.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Advisor, App, Learn, IDE, Website, CodeSnippets |
   */
  eventSource?: "Advisor" | "App" | "Learn" | "IDE" | "Website" | "CodeSnippets";
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Issue ID as received from the backend.
   */
  issueId?: string;
  /**
   * Issue type
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Advisor, Code Quality Issue, Code Security Vulnerability, Licence Issue, Open Source Vulnerability, Infrastructure as Code Issue, Container Vulnerability |
   */
  issueType?:
    | "Advisor"
    | "Code Quality Issue"
    | "Code Security Vulnerability"
    | "Licence Issue"
    | "Open Source Vulnerability"
    | "Infrastructure as Code Issue"
    | "Container Vulnerability";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
  /**
   * Severity of the issue
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | High, Medium, Low, Critical |
   */
  severity?: "High" | "Medium" | "Low" | "Critical";
}

export interface IssueHoverIsDisplayedProperties {
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Issue ID as received from the backend.
   */
  issueId?: string;
  /**
   * Issue type
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Advisor, Code Quality Issue, Code Security Vulnerability, Licence Issue, Open Source Vulnerability, Infrastructure as Code Issue, Container Vulnerability |
   */
  issueType?:
    | "Advisor"
    | "Code Quality Issue"
    | "Code Security Vulnerability"
    | "Licence Issue"
    | "Open Source Vulnerability"
    | "Infrastructure as Code Issue"
    | "Container Vulnerability";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
  /**
   * Severity of the issue
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | High, Medium, Low, Critical |
   */
  severity?: "High" | "Medium" | "Low" | "Critical";
}

export interface IssueInTreeIsClickedProperties {
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Issue ID as received from the backend.
   */
  issueId?: string;
  /**
   * Issue type
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Advisor, Code Quality Issue, Code Security Vulnerability, Licence Issue, Open Source Vulnerability, Infrastructure as Code Issue, Container Vulnerability |
   */
  issueType?:
    | "Advisor"
    | "Code Quality Issue"
    | "Code Security Vulnerability"
    | "Licence Issue"
    | "Open Source Vulnerability"
    | "Infrastructure as Code Issue"
    | "Container Vulnerability";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
  /**
   * Severity of the issue
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | High, Medium, Low, Critical |
   */
  severity?: "High" | "Medium" | "Low" | "Critical";
}

export interface PluginIsInstalledProperties {
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
}

export interface QuickFixIsDisplayedProperties {
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * Quick fix types displayed to the user:
   *
   * * Show this suggestion
   *
   * * Ignore this particular suggestion
   *
   * * Ignore this suggestion in current file
   *
   * Due to array type definition limitation in Iteratively, the type is enforced in the code as follows:
   *
   * ```
   * type SupportedQuickFixProperties =
   * | 'Show Suggestion'
   * | 'Ignore Suggestion In Line'
   * | 'Ignore Suggestion In File';
   * ```
   *
   * | Rule | Value |
   * |---|---|
   * | Min Items | 1 |
   * | Unique Items | true |
   * | Item Type | string |
   *
   * @minItems 1
   */
  quickFixType: [string, ...string[]];
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
}

export interface ScanModeIsSelectedProperties {
  /**
   * Used to identify the source for multi-source events.
   *
   * For example, if a given event is shared between Snyk Advisor and Snyk Learn, this property helps to differentiate between the two.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Advisor, App, Learn, IDE, Website, CodeSnippets |
   */
  eventSource?: "Advisor" | "App" | "Learn" | "IDE" | "Website" | "CodeSnippets";
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | paused, auto, manual, throttled |
   */
  scanMode: "paused" | "auto" | "manual" | "throttled";
}

export interface WelcomeButtonIsClickedProperties {
  /**
   * Used to identify the source for multi-source events.
   *
   * For example, if a given event is shared between Snyk Advisor and Snyk Learn, this property helps to differentiate between the two.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Advisor, App, Learn, IDE, Website, CodeSnippets |
   */
  eventSource?: "Advisor" | "App" | "Learn" | "IDE" | "Website" | "CodeSnippets";
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
}

export interface WelcomeIsViewedProperties {
  /**
   * Ide family.
   *
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Visual Studio Code, Visual Studio, Eclipse, JetBrains, Other |
   */
  ide: "Visual Studio Code" | "Visual Studio" | "Eclipse" | "JetBrains" | "Other";
  /**
   * Operating system architecture
   */
  osArch?: string;
  /**
   * Operating system platform
   */
  osPlatform?: string;
  /**
   * IDE plugin runtime name.
   */
  runtimeName?: string;
  /**
   * IDE plugin runtime version.
   *
   * | Rule | Value |
   * |---|---|
   * | Min Length | 1 |
   */
  runtimeVersion?: string;
}

export class AnalysisIsReady implements Event {
  name = 'Analysis Is Ready';
  id = 'c9337edb-27a3-416e-a654-092fa4375feb';
  version = '3.0.0';
  properties: AnalysisIsReadyProperties & {
    'itly': true;
  };

  constructor(
    properties: AnalysisIsReadyProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class AnalysisIsTriggered implements Event {
  name = 'Analysis Is Triggered';
  id = 'dabf569e-219c-470f-8e31-6e029723f0cd';
  version = '3.0.0';
  properties: AnalysisIsTriggeredProperties & {
    'itly': true;
  };

  constructor(
    properties: AnalysisIsTriggeredProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class AuthenticateButtonIsClicked implements Event {
  name = 'Authenticate Button Is Clicked';
  id = '2220c25f-ba76-4d5b-92f7-6d0e1c6165be';
  version = '4.0.0';
  properties: AuthenticateButtonIsClickedProperties & {
    'itly': true;
  };

  constructor(
    properties: AuthenticateButtonIsClickedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class FalsePositiveIsDisplayed implements Event {
  name = 'False Positive Is Displayed';
  id = '73047ba4-5e6b-4472-8d4e-1923fc7117f4';
  version = '4.0.0';
  properties: FalsePositiveIsDisplayedProperties & {
    'itly': true;
  };

  constructor(
    properties: FalsePositiveIsDisplayedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class FalsePositiveIsSubmitted implements Event {
  name = 'False Positive Is Submitted';
  id = '299be947-f18c-41c4-96f8-33f4c8daa5a1';
  version = '4.0.0';
  properties: FalsePositiveIsSubmittedProperties & {
    'itly': true;
  };

  constructor(
    properties: FalsePositiveIsSubmittedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class IssueHoverIsDisplayed implements Event {
  name = 'Issue Hover Is Displayed';
  id = '5bcc7fd8-6118-4777-b719-366cda263a13';
  version = '3.0.0';
  properties: IssueHoverIsDisplayedProperties & {
    'itly': true;
  };

  constructor(
    properties: IssueHoverIsDisplayedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class IssueInTreeIsClicked implements Event {
  name = 'Issue In Tree Is Clicked';
  id = 'fae15d02-eab9-49bb-9833-18414e26058b';
  version = '3.0.0';
  properties: IssueInTreeIsClickedProperties & {
    'itly': true;
  };

  constructor(
    properties: IssueInTreeIsClickedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class PluginIsInstalled implements Event {
  name = 'Plugin Is Installed';
  id = '7bb34693-366e-460e-8f4c-5b3f1c71888a';
  version = '2.0.0';
  properties: PluginIsInstalledProperties & {
    'itly': true;
  };

  constructor(
    properties: PluginIsInstalledProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class QuickFixIsDisplayed implements Event {
  name = 'Quick Fix Is Displayed';
  id = '170c1284-9ee6-457f-aa82-6c49e49cde93';
  version = '2.0.0';
  properties: QuickFixIsDisplayedProperties & {
    'itly': true;
  };

  constructor(
    properties: QuickFixIsDisplayedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class ScanModeIsSelected implements Event {
  name = 'Scan Mode Is Selected';
  id = '41d49045-d336-46ac-b4c2-1a3ebb5c688a';
  version = '4.0.0';
  properties: ScanModeIsSelectedProperties & {
    'itly': true;
  };

  constructor(
    properties: ScanModeIsSelectedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class WelcomeButtonIsClicked implements Event {
  name = 'Welcome Button Is Clicked';
  id = 'e570e72e-4974-481a-9838-66cca471656b';
  version = '4.0.0';
  properties: WelcomeButtonIsClickedProperties & {
    'itly': true;
  };

  constructor(
    properties: WelcomeButtonIsClickedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

export class WelcomeIsViewed implements Event {
  name = 'Welcome Is Viewed';
  id = '91114669-bbab-4f58-a7dd-ea7c98c79221';
  version = '2.0.0';
  properties: WelcomeIsViewedProperties & {
    'itly': true;
  };

  constructor(
    properties: WelcomeIsViewedProperties,
  ) {
    this.properties = {
        ...properties,
        'itly': true,
      };
  }
}

// prettier-ignore
interface DestinationOptions {

  all?: {
    disabled?: boolean;
  };
}

export interface LoadOptions extends OptionsBase {
  /**
   * Analytics provider-specific configuration.
   */
  destinations?: DestinationOptions;
}

// prettier-ignore
class Itly {
  private itly: ItlyNode;

  constructor() {
    this.itly = new ItlyNode();
  }

  /**
   * Initialize the Itly SDK. Call once when your application starts.
   * @param loadOptions Configuration options to initialize the Itly SDK with.
   */
  load(loadOptions: LoadOptions = {}) {
    const {
      destinations = {} as DestinationOptions,
      plugins = [] as Plugin[],
      ...options
    } = loadOptions;

    const destinationPlugins = destinations.all && destinations.all.disabled
      ? []
      : [

      ];

    this.itly.load({
      ...options,
      plugins: [
        new SchemaValidatorPlugin({
          'group': {"type":"object","properties":{"[Amplitude] Group ID":{"type":"object"},"[Amplitude] Group name":{"type":"object"},"$set":{"type":"object"},"$unset":{"type":"object"},"Account ARR":{"type":"object"},"Account Plan":{"type":"object"},"Billing Frequency":{"type":"object"},"Code Licenses":{"type":"object"},"Container Licenses":{"type":"object"},"countFixesFirst30Days":{"type":"object"},"countFixesFirst7Days":{"type":"object"},"countFixesPast30Days":{"type":"object"},"countFixesPast7Days":{"type":"object"},"countFixesTotal":{"type":"object"},"currentEngagementState":{"type":"object"},"dateLastEngagementStateChange":{"type":"object"},"daysSinceLastEngagementStateChange":{"type":"object"},"DB Feed Licenses":{"type":"object"},"Free Trial End Date":{"type":"object"},"Free Trial Start Date":{"type":"object"},"groupId":{"type":"string"},"groupName":{"type":"string"},"groupType":{"enum":["org","group","account"]},"hasFixFirst30Days":{"type":"object"},"hasFixFirst7Days":{"type":"object"},"hasFixPast30Days":{"type":"object"},"hasFixPast7Days":{"type":"object"},"IAC Licenses":{"type":"object"},"id":{"type":"object"},"internalName":{"type":"object"},"isPassthrough":{"type":"object"},"name":{"type":"object"},"Open Source Licenses":{"type":"object"},"plan":{"type":"string"},"priorEngagementState":{"type":"object"},"projectTypes":{"type":"array","items":{"type":"string"},"uniqueItems":true}},"additionalProperties":false,"required":[]},
          'identify': {"type":"object","properties":{"accountType":{"enum":["user","service","app-instance","automated-test-user"]},"adminLink":{"type":"string"},"authProvider":{"type":"string"},"createdAt":{"type":"number"},"email":{"type":"string"},"hasFirstIntegration":{"type":"boolean"},"hasFirstProject":{"type":"boolean"},"hasPersonalEmail":{"type":"boolean"},"isAppUIBetaEnabled":{"type":"boolean"},"isNonUser":{"type":"boolean"},"isSnyk":{"type":"boolean"},"isSnykAdmin":{"type":"boolean"},"learnPreferredEcosystems":{"type":"array","items":{"type":"string"},"uniqueItems":true},"productUpdatesConsent":{"type":"boolean"},"productUpdatesConsentIsDisplayed":{"type":"boolean"},"user_id":{"type":"string"},"username":{"type":"string"},"utm_campaign":{"type":"string"},"utm_content":{"type":"string"},"utm_medium":{"type":"string"},"utm_source":{"type":"string"},"utm_term":{"type":"string"}},"additionalProperties":false,"required":[]},
          'page': {"type":"object","properties":{"ecosystem":{"type":"string"},"package":{"type":"string"},"packageManager":{"type":"string"},"packageVersion":{"type":"string"},"path":{"type":"string"},"referrer":{"type":"string"},"search":{"type":"string"},"title":{"type":"string"},"url":{"type":"string"},"vulnerabilityId":{"type":"string"}},"additionalProperties":false,"required":[]},
          'Analysis Is Ready': {"type":"object","properties":{"analysisType":{"enum":["Snyk Advisor","Snyk Code Quality","Snyk Code Security","Snyk Open Source","Snyk Container","Snyk Infrastructure as Code"]},"durationInSeconds":{"type":"number"},"fileCount":{"type":"integer"},"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"result":{"enum":["Success","Error"]},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1}},"additionalProperties":false,"required":["analysisType","ide","itly","result"]},
          'Analysis Is Triggered': {"type":"object","properties":{"analysisType":{"type":"array","items":{"type":"string"},"minItems":1,"uniqueItems":true},"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1},"triggeredByUser":{"type":"boolean"}},"additionalProperties":false,"required":["analysisType","ide","itly","triggeredByUser"]},
          'Authenticate Button Is Clicked': {"type":"object","properties":{"eventSource":{"enum":["Advisor","App","Learn","IDE","Website","CodeSnippets"]},"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1}},"additionalProperties":false,"required":["ide","itly"]},
          'False Positive Is Displayed': {"type":"object","properties":{"eventSource":{"enum":["Advisor","App","Learn","IDE","Website","CodeSnippets"]},"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1}},"additionalProperties":false,"required":["ide","itly"]},
          'False Positive Is Submitted': {"type":"object","properties":{"eventSource":{"enum":["Advisor","App","Learn","IDE","Website","CodeSnippets"]},"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"issueId":{"type":"string"},"issueType":{"enum":["Advisor","Code Quality Issue","Code Security Vulnerability","Licence Issue","Open Source Vulnerability","Infrastructure as Code Issue","Container Vulnerability"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1},"severity":{"enum":["High","Medium","Low","Critical"]}},"additionalProperties":false,"required":["ide","itly"]},
          'Issue Hover Is Displayed': {"type":"object","properties":{"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"issueId":{"type":"string"},"issueType":{"enum":["Advisor","Code Quality Issue","Code Security Vulnerability","Licence Issue","Open Source Vulnerability","Infrastructure as Code Issue","Container Vulnerability"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1},"severity":{"enum":["High","Medium","Low","Critical"]}},"additionalProperties":false,"required":["ide","itly"]},
          'Issue In Tree Is Clicked': {"type":"object","properties":{"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"issueId":{"type":"string"},"issueType":{"enum":["Advisor","Code Quality Issue","Code Security Vulnerability","Licence Issue","Open Source Vulnerability","Infrastructure as Code Issue","Container Vulnerability"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1},"severity":{"enum":["High","Medium","Low","Critical"]}},"additionalProperties":false,"required":["ide","itly"]},
          'Plugin Is Installed': {"type":"object","properties":{"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1}},"additionalProperties":false,"required":["ide","itly"]},
          'Quick Fix Is Displayed': {"type":"object","properties":{"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"quickFixType":{"type":"array","items":{"type":"string"},"minItems":1,"uniqueItems":true},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1}},"additionalProperties":false,"required":["ide","itly","quickFixType"]},
          'Scan Mode Is Selected': {"type":"object","properties":{"eventSource":{"enum":["Advisor","App","Learn","IDE","Website","CodeSnippets"]},"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1},"scanMode":{"enum":["paused","auto","manual","throttled"]}},"additionalProperties":false,"required":["ide","itly","scanMode"]},
          'Welcome Button Is Clicked': {"type":"object","properties":{"eventSource":{"enum":["Advisor","App","Learn","IDE","Website","CodeSnippets"]},"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1}},"additionalProperties":false,"required":["ide","itly"]},
          'Welcome Is Viewed': {"type":"object","properties":{"ide":{"enum":["Visual Studio Code","Visual Studio","Eclipse","JetBrains","Other"]},"itly":{"const":true},"osArch":{"type":"string"},"osPlatform":{"type":"string"},"runtimeName":{"type":"string"},"runtimeVersion":{"type":"string","minLength":1}},"additionalProperties":false,"required":["ide","itly"]},
        }),
        ...destinationPlugins,
        ...plugins,
      ],
    });
  }

  /**
   * Alias a user ID to another user ID.
   * @param userId The user's new ID.
   * @param previousId The user's previous ID.
   * @param options Options for this alias call.
   */
  alias(userId: string, previousId: string, options?: AliasOptions) {
    this.itly.alias(userId, previousId, options);
  }

  /**
   * Identify a user and set or update that user's properties.
   * @param userId The user's ID.
   * @param properties The user's properties.
   * @param options Options for this identify call.
   */
  identify(
    userId: string,
    properties?: IdentifyProperties,
    options?: IdentifyOptions,
  ) {
    this.itly.identify(userId, properties, options)
  }

  /**
   * Associate a user with a group and set or update that group's properties.
   * @param userId The user's ID.
   * @param groupId The group's ID.
   * @param properties The group's properties.
   * @param options Options for this group call.
   */
  group(
    userId: string,
    groupId: string,
    properties?: GroupProperties,
    options?: GroupOptions,
  ) {
    this.itly.group(userId, groupId, properties, options)
  }

  /**
   * Triggered when the analysis is loaded within the IDE.
   *
   * Owner: Georgi Mitev
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. analysisType)
   * @param options Options for this track call.
   */
  analysisIsReady(
    userId: string,
    properties: AnalysisIsReadyProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new AnalysisIsReady(properties), options);
  }

  /**
   * User triggers an analysis or analysis is automatically triggered.
   *
   * Owner: Georgi Mitev
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. analysisType)
   * @param options Options for this track call.
   */
  analysisIsTriggered(
    userId: string,
    properties: AnalysisIsTriggeredProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new AnalysisIsTriggered(properties), options);
  }

  /**
   * This Event fires when the authenticate button is clicked.
   *
   * Owner: Bastian Doetsch
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. eventSource)
   * @param options Options for this track call.
   */
  authenticateButtonIsClicked(
    userId: string,
    properties: AuthenticateButtonIsClickedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new AuthenticateButtonIsClicked(properties), options);
  }

  /**
   * This event fires when the "Report false positive" view is shown in IDE.
   *
   * Owner: Michel Kaporin
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. eventSource)
   * @param options Options for this track call.
   */
  falsePositiveIsDisplayed(
    userId: string,
    properties: FalsePositiveIsDisplayedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new FalsePositiveIsDisplayed(properties), options);
  }

  /**
   * This event fires when false positive is reported from IDE.
   *
   * Owner: Michel Kaporin
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. eventSource)
   * @param options Options for this track call.
   */
  falsePositiveIsSubmitted(
    userId: string,
    properties: FalsePositiveIsSubmittedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new FalsePositiveIsSubmitted(properties), options);
  }

  /**
   * Triggered when issue hover is displayed in the IDE editor.
   *
   * Owner: Michel Kaporin
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. ide)
   * @param options Options for this track call.
   */
  issueHoverIsDisplayed(
    userId: string,
    properties: IssueHoverIsDisplayedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new IssueHoverIsDisplayed(properties), options);
  }

  /**
   * Triggered when the user selects an issue from the issues list and the issue is loaded.
   *
   * Owner: Georgi Mitev
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. ide)
   * @param options Options for this track call.
   */
  issueInTreeIsClicked(
    userId: string,
    properties: IssueInTreeIsClickedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new IssueInTreeIsClicked(properties), options);
  }

  /**
   * Triggered when the user installs the plugin.
   *
   * Owner: Georgi Mitev
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. ide)
   * @param options Options for this track call.
   */
  pluginIsInstalled(
    userId: string,
    properties: PluginIsInstalledProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new PluginIsInstalled(properties), options);
  }

  /**
   * Triggered when quick fix options are displayed to the user in IDE.
   *
   * Owner: Michel Kaporin
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. ide)
   * @param options Options for this track call.
   */
  quickFixIsDisplayed(
    userId: string,
    properties: QuickFixIsDisplayedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new QuickFixIsDisplayed(properties), options);
  }

  /**
   * Owner: Michel Kaporin
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. eventSource)
   * @param options Options for this track call.
   */
  scanModeIsSelected(
    userId: string,
    properties: ScanModeIsSelectedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new ScanModeIsSelected(properties), options);
  }

  /**
   * This event fires when the "Check it out" button is clicked in welcome notification.
   *
   * Owner: Michel Kaporin
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. eventSource)
   * @param options Options for this track call.
   */
  welcomeButtonIsClicked(
    userId: string,
    properties: WelcomeButtonIsClickedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new WelcomeButtonIsClicked(properties), options);
  }

  /**
   * User installs the IDE plugin and see Snyk's welcome screen.
   *
   * Owner: Georgi Mitev
   * @param userId The user's ID.
   * @param properties The event's properties (e.g. ide)
   * @param options Options for this track call.
   */
  welcomeIsViewed(
    userId: string,
    properties: WelcomeIsViewedProperties,
    options?: TrackOptions,
  ) {
    this.itly.track(userId, new WelcomeIsViewed(properties), options);
  }

  /**
   * Track any event.
   * @param userId The user's ID.
   * @param event The event to track.
   * @param options Options for this track call.
   */
  track(userId: string, event: Event, options?: TrackOptions) {
    this.itly.track(userId, event, options);
  }

  // reset() N/A for Node.js

  async flush() {
    await this.itly.flush();
  }
}

export default new Itly();
